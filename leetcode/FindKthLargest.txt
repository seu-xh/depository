JAVA£º
public int quickselect(int[] A, int k, int start, int end) {
    int l = start, r = end, pivot = A[(l+r)/2];
    while (l<=r) {
        while (A[l] < pivot) l++;
        while (A[r] > pivot) r--;
        if (l>=r) break;
        swap(A, l++, r--);
    }
    if (l-start+1 > k) return quickselect(A, k, start, l-1);
    if (l-start+1 == k && l==r) return A[l];
    return quickselect(A, k-r+start-1, r+1, end);
}


C++
class Solution {
public:
    
    int partition(vector<int> &nums, int l, int r) {
        int len = r - l + 1;
        int index = (rand() % len) + l;
        swap(nums[index], nums[r]);
        int pivot = nums[r];
        
        int less = l;
        for (int i = l; i < r; i++) {
            if (nums[i] <= pivot) {
                swap(nums[i], nums[less++]);
            }
        }
        
        swap(nums[less], nums[r]);
        
        return less;
    }
    
    int selectK(vector<int> &nums, int k, int l , int r) {
        if (l >= r) return l;
        
        int pivot_index = partition(nums, l, r);
        
        if (pivot_index - l + 1 == k) {
            return pivot_index;
        } else if (pivot_index - l + 1 < k) {
            return selectK(nums, k - (pivot_index - l + 1), pivot_index + 1, r);
        } else {
            return selectK(nums, k, l, pivot_index - 1);
        }
    }