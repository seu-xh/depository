 vector<int>findLongestIncresingOrDecresingSequence(vector<int>nums) {
		 int len = nums.size();
		 vector<pair<int, int>>dp1(len);//Incresing
		 vector<pair<int, int>>dp2(len);//Decresing



		 int max1, max2;
		 max1 = max2 = -1;
		 for (int i = len - 1; i >= 0; i--)
		 {
			 if (i == len - 1)
				 dp1[i] = dp2[i] = { 1,-1 };
			 else
			 {
				 int maxIndex1 = -1;
				 int maxIndex2 = -1;
				 for (int j = i + 1; j < len; j++)
				 {
					 if (nums[j] > nums[i])
					 {
						 if (maxIndex1 == -1 || dp1[j].first > dp1[maxIndex1].first||(dp1[j].first == dp1[maxIndex1].first&&nums[j]<nums[maxIndex1]))
							 maxIndex1 = j;
					 }
					 else if (nums[j] < nums[i])
					 {
						 if (maxIndex2 == -1 || dp2[j].first > dp2[maxIndex2].first||(dp2[j].first == dp2[maxIndex2].first&&nums[j]>nums[maxIndex2]))
							 maxIndex2 = j;
					 }

				 }


				 dp1[i] = ((maxIndex1 == -1) ? make_pair(1, -1) : make_pair(dp1[maxIndex1].first + 1, maxIndex1));
				 dp2[i] = ((maxIndex2 == -1) ? make_pair(1, -1) : make_pair(dp2[maxIndex2].first + 1, maxIndex2));


			 }





			 if (max1 == -1 || dp1[i].first > dp1[max1].first)
				 max1 = i;


			 if (max2 == -1 || dp2[i].first > dp2[max2].first)
				 max2 = i;




		 }


		 vector<int>res;


		 if (dp1[max1] < dp2[max2])
		 {
			 while (max2 >= 0)
			 {
				 res.push_back(nums[max2]);
				 max2 = dp2[max2].second;
			 }
		 }
		 else
		 {
			 while (max1 >= 0)
			 {
				 res.push_back(nums[max1]);
				 max1 = dp1[max1].second;
			 }
		 }

		 for (auto a : res)
			 cout << a << " ";
		 cout << endl;

		 return res;
	 }

 };